"use strict";
var __extends = (this && this.__extends) || (function () {
    var extendStatics = Object.setPrototypeOf ||
        ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
        function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
    return function (d, b) {
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
Object.defineProperty(exports, "__esModule", { value: true });
var Command_1 = require("./Command");
var min = Math.min, cos = Math.cos, sin = Math.sin;
var BackwardCommand = (function (_super) {
    __extends(BackwardCommand, _super);
    function BackwardCommand(amount) {
        var _this = _super.call(this) || this;
        _this.amount = amount;
        return _this;
    }
    BackwardCommand.prototype.execute = function (context, amount) {
        context.gfx.beginPath();
        var distance = min(amount, this.amount);
        var direction = context.turtle.angle + Math.PI;
        var dx = cos(direction) * distance;
        var dy = sin(direction) * distance;
        context.gfx.lineTo(context.turtle.x, context.turtle.y);
        context.turtle.x += dx;
        context.turtle.y += dy;
        context.gfx.lineTo(context.turtle.x, context.turtle.y);
        context.gfx.stroke();
        this.amount -= distance;
        if (this.amount <= 0) {
            this.done = true;
        }
        return amount - distance;
    };
    return BackwardCommand;
}(Command_1.Command));
exports.BackwardCommand = BackwardCommand;
//# sourceMappingURL=BackwardCommand.js.map