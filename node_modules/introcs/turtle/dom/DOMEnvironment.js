"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
var CommandQueue_1 = require("../commands/CommandQueue");
var Context_1 = require("../Context");
var Turtle_1 = require("../Turtle");
var MoveToCommand_1 = require("../commands/MoveToCommand");
var DOMEnvironment = (function () {
    function DOMEnvironment() {
        var _this = this;
        this.commands = new CommandQueue_1.CommandQueue();
        this._renderRequested = false;
        this._activelyRendering = false;
        this._el = document.createElement("canvas");
        document.getElementsByTagName("body")[0].appendChild(this._el);
        this._el.width = window.innerWidth;
        this._el.height = window.innerHeight;
        this._el.onclick = function (e) { return _this._onclick ? _this._onclick(e.offsetX, e.offsetY) : null; };
        this._gfx = this._el.getContext("2d");
        this._ctx = new Context_1.Context(this._gfx, this.initTurtle(), 1);
        this.initGfx(this._gfx);
        this.emit(new MoveToCommand_1.MoveToCommand(this._el.width / 2, this._el.height / 2));
    }
    DOMEnvironment.prototype.emit = function (command) {
        this.commands.enqueue(command);
        this.requestRender();
    };
    DOMEnvironment.prototype.setOnClick = function (handler) {
        this._onclick = handler;
    };
    DOMEnvironment.prototype.render = function (timestamp) {
        this._renderRequested = false;
        if (!this._activelyRendering) {
            this._activelyRendering = true;
            this._lastRenderedAt = timestamp;
        }
        var timeSlice = (timestamp - this._lastRenderedAt) * this._ctx.turtle.speed;
        this._lastRenderedAt = timestamp;
        while (timeSlice > 0 && this.commands.hasNext()) {
            timeSlice = this.commands.current().execute(this._ctx, timeSlice);
            if (this.commands.current().done) {
                this.commands.next();
            }
        }
        if (!this.commands.isEmpty()) {
            this.requestRender();
        }
        else {
            this._activelyRendering = false;
        }
    };
    DOMEnvironment.prototype.initGfx = function (gfx) {
        gfx.fillStyle = "black";
        gfx.strokeStyle = "black";
    };
    DOMEnvironment.prototype.initTurtle = function () {
        return new Turtle_1.Turtle();
    };
    DOMEnvironment.prototype.requestRender = function () {
        var _this = this;
        if (!this._renderRequested) {
            this._renderRequested = true;
            requestAnimationFrame(function (timestamp) { return _this.render(timestamp); });
        }
    };
    return DOMEnvironment;
}());
exports.DOMEnvironment = DOMEnvironment;
//# sourceMappingURL=DOMEnvironment.js.map