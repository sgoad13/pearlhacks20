"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
var Session_1 = require("./Session");
var Print_1 = require("./functions/Print");
var PromptString_1 = require("./functions/PromptString");
var PromptNumber_1 = require("./functions/PromptNumber");
var PromptBoolean_1 = require("./functions/PromptBoolean");
var CSVToArray_1 = require("./functions/CSVToArray");
var Image_1 = require("./functions/Image");
var Clear_1 = require("./functions/Clear");
var OutOfCallsError_1 = require("./OutOfCallsError");
var TestConsole = (function () {
    function TestConsole() {
        this._expected = new Session_1.default();
        this._actual = new Session_1.default();
        this._testing = false;
    }
    Object.defineProperty(TestConsole.prototype, "actual", {
        get: function () {
            return this._actual;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(TestConsole.prototype, "expected", {
        set: function (expected) {
            this._expected = expected;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(TestConsole.prototype, "testing", {
        get: function () {
            return this._testing;
        },
        set: function (value) {
            this._testing = value;
        },
        enumerable: true,
        configurable: true
    });
    TestConsole.prototype.print = function (s) {
        var functionCall = new Print_1.default(s);
        if (this._actual.log(functionCall) && this._testing) {
            this._expected.test(functionCall);
        }
    };
    TestConsole.prototype.image = function (url) {
        var functionCall = new Image_1.default(url);
        if (this._actual.log(functionCall) && this._testing) {
            this._expected.test(functionCall);
        }
    };
    TestConsole.prototype.promptNumber = function (prompt, response) {
        var functionCall = new PromptNumber_1.default(prompt, response);
        if (this._actual.log(functionCall) && this._testing) {
            var expected = this._expected.test(functionCall);
            return Promise.resolve(expected.response);
        }
        if (response) {
            return Promise.resolve(response);
        }
        else {
            return Promise.reject(new OutOfCallsError_1.default(functionCall));
        }
    };
    TestConsole.prototype.promptString = function (prompt, response) {
        var functionCall = new PromptString_1.default(prompt, response);
        if (this._actual.log(functionCall) && this._testing) {
            var expected = this._expected.test(functionCall);
            return Promise.resolve(expected.response);
        }
        if (response) {
            return Promise.resolve(response);
        }
        else {
            return Promise.reject(new OutOfCallsError_1.default(functionCall));
        }
    };
    TestConsole.prototype.promptBoolean = function (prompt, response) {
        var functionCall = new PromptBoolean_1.default(prompt, response);
        if (this._actual.log(functionCall) && this._testing) {
            var expected = this._expected.test(functionCall);
            return Promise.resolve(expected.response);
        }
        if (response) {
            return Promise.resolve(response);
        }
        else {
            return Promise.reject(new OutOfCallsError_1.default(functionCall));
        }
    };
    TestConsole.prototype.csvToArray = function (prompt, classname, response) {
        var functionCall = new CSVToArray_1.default(prompt, response);
        if (this._actual.log(functionCall) && this._testing) {
            var expected = this._expected.test(functionCall);
            return Promise.resolve(expected.response);
        }
        if (response) {
            return Promise.resolve(response);
        }
        else {
            throw new OutOfCallsError_1.default(functionCall);
        }
    };
    TestConsole.prototype.csvToList = function (prompt, classname) {
        return Promise.resolve(null);
    };
    TestConsole.prototype.setInterval = function (cb, duration) {
        return 0;
    };
    TestConsole.prototype.clear = function () {
        var functionCall = new Clear_1.default();
        if (this._actual.log(functionCall) && this._testing) {
            this._expected.test(functionCall);
        }
    };
    TestConsole.prototype.random = function (floor, ceiling) {
        return floor;
    };
    TestConsole.prototype.error = function (e) {
    };
    return TestConsole;
}());
exports.default = TestConsole;
//# sourceMappingURL=TestConsole.js.map