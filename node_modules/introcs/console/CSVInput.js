"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
var DOM_1 = require("./DOM");
var DOMClasses_1 = require("./DOMClasses");
var CSVInput = (function () {
    function CSVInput(prompt, classname, callback) {
        this.submitted = false;
        this.callback = callback;
        this.classname = classname;
        this.initDOM(prompt);
    }
    CSVInput.prototype.initDOM = function (prompt) {
        this.okButton = DOM_1.input("button", "btn submit", "Ok");
        this.fileInput = DOM_1.input("text", "value");
        this.fileInput.type = "file";
        this.fileInput.accept = "text/csv";
        this.dom = DOM_1.div("ask", [
            DOM_1.div("prompt", prompt),
            this.fileInput,
            this.okButton
        ]);
        this.invalidState();
        this.initEventHandlers();
    };
    CSVInput.prototype.initEventHandlers = function () {
        this.okButton.onclick = this.submit.bind(this);
        this.fileInput.onchange = this.submit.bind(this);
    };
    CSVInput.prototype.submit = function (e) {
        this.submittedState();
        this.selected(this.fileInput.files);
    };
    CSVInput.prototype.invalidState = function () {
        DOMClasses_1.default.remove(this.dom, "valid");
        this.okButton.setAttribute("disabled", "disabled");
    };
    CSVInput.prototype.submittedState = function () {
        DOMClasses_1.default.add(this.dom, "submitted");
        DOMClasses_1.default.remove(this.dom, "valid");
        this.fileInput.setAttribute("disabled", "disabled");
        this.okButton.setAttribute("disabled", "disabled");
    };
    CSVInput.prototype.selected = function (files) {
        var _this = this;
        if (files === null) {
            return;
        }
        var reader = new FileReader();
        var sample = new this.classname();
        reader.readAsText(files[0]);
        reader.onload = function (event) {
            var reader2 = event.target;
            var lines = reader2.result.split(/\r\n|\n/);
            var types = {};
            var keys = _this.parseRow(lines[0]);
            if (keys === null) {
                return;
            }
            var objects = [];
            for (var _i = 0, keys_1 = keys; _i < keys_1.length; _i++) {
                var key = keys_1[_i];
                if (sample[key] !== undefined) {
                    types[key] = typeof sample[key];
                }
                else {
                    types[key] = "undefined";
                }
            }
            var typeMatch = false;
            for (var key in types) {
                var type = types[key];
                if (type !== "undefined") {
                    typeMatch = true;
                    break;
                }
            }
            if (!typeMatch) {
                _this.invalidState();
                throw new Error("No matching column names found in: " + keys.join(", "));
            }
            for (var i = 1; i < lines.length; i++) {
                var row = _this.parseRow(lines[i]);
                if (row !== null) {
                    var object = new _this.classname();
                    for (var h = 0; h < row.length; h++) {
                        var column = keys[h];
                        var type = types[column];
                        switch (type) {
                            case "number":
                                object[column] = parseFloat(row[h]);
                                break;
                            case "string":
                                object[column] = row[h];
                                break;
                            case "boolean":
                                object[column] = row[h].toLowerCase() === "t" || row[h].toLowerCase() === "true";
                                break;
                            case "undefined":
                                break;
                            default:
                                object[column] = row[h];
                                break;
                        }
                    }
                    objects.push(object);
                }
            }
            _this.callback(objects);
            _this.submittedState();
        };
    };
    CSVInput.prototype.parseRow = function (row) {
        var columns = [];
        var start = 0;
        var quotes = false;
        var piece = "";
        for (var i = 0; i < row.length; i++) {
            var char = row[i];
            if (quotes) {
                if (char === "\"") {
                    var nextChar = row[i + 1];
                    if (nextChar) {
                        if (nextChar === "\"") {
                            piece += "\"";
                            i++;
                        }
                        else if (nextChar === ",") {
                            quotes = false;
                        }
                    }
                }
                else {
                    piece += char;
                }
            }
            else {
                if (char === ",") {
                    columns.push(piece);
                    start = i + 1;
                    piece = "";
                }
                else if (char === "\"") {
                    quotes = true;
                    start = i + 1;
                }
                else {
                    piece += char;
                }
            }
        }
        columns.push(row.substr(start));
        if (columns.join("") === "") {
            return null;
        }
        else {
            return columns;
        }
    };
    return CSVInput;
}());
exports.default = CSVInput;
//# sourceMappingURL=CSVInput.js.map