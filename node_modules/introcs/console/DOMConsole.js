"use strict";
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : new P(function (resolve) { resolve(result.value); }).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
var __generator = (this && this.__generator) || function (thisArg, body) {
    var _ = { label: 0, sent: function() { if (t[0] & 1) throw t[1]; return t[1]; }, trys: [], ops: [] }, f, y, t, g;
    return g = { next: verb(0), "throw": verb(1), "return": verb(2) }, typeof Symbol === "function" && (g[Symbol.iterator] = function() { return this; }), g;
    function verb(n) { return function (v) { return step([n, v]); }; }
    function step(op) {
        if (f) throw new TypeError("Generator is already executing.");
        while (_) try {
            if (f = 1, y && (t = y[op[0] & 2 ? "return" : op[0] ? "throw" : "next"]) && !(t = t.call(y, op[1])).done) return t;
            if (y = 0, t) op = [0, t.value];
            switch (op[0]) {
                case 0: case 1: t = op; break;
                case 4: _.label++; return { value: op[1], done: false };
                case 5: _.label++; y = op[1]; op = [0]; continue;
                case 7: op = _.ops.pop(); _.trys.pop(); continue;
                default:
                    if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) { _ = 0; continue; }
                    if (op[0] === 3 && (!t || (op[1] > t[0] && op[1] < t[3]))) { _.label = op[1]; break; }
                    if (op[0] === 6 && _.label < t[1]) { _.label = t[1]; t = op; break; }
                    if (t && _.label < t[2]) { _.label = t[2]; _.ops.push(op); break; }
                    if (t[2]) _.ops.pop();
                    _.trys.pop(); continue;
            }
            op = body.call(thisArg, _);
        } catch (e) { op = [6, e]; y = 0; } finally { f = t = 0; }
        if (op[0] & 5) throw op[1]; return { value: op[0] ? op[1] : void 0, done: true };
    }
};
Object.defineProperty(exports, "__esModule", { value: true });
var DOM_1 = require("./DOM");
var TextInput_1 = require("./TextInput");
var CSVInput_1 = require("./CSVInput");
var list = require("../list/index");
var DOMConsole = (function () {
    function DOMConsole() {
        var el = document.getElementById("console");
        if (el != null) {
            this._el = el;
        }
        else {
            this._el = document.createElement("div");
            document.getElementsByTagName("body")[0].appendChild(this._el);
        }
    }
    DOMConsole.prototype.error = function (e) {
        this.append(DOM_1.div("error", [
            DOM_1.div("message", e.message),
            DOM_1.div("help", "Open the Console in Developer Tools to find the filename and line number this error originated from.")
        ]));
    };
    DOMConsole.prototype.print = function (value) {
        var valueNode;
        if (value instanceof list.Node) {
            valueNode = this.listToTable(value);
        }
        else if (value !== null && !Array.isArray(value) && typeof value == "object" && value.toString() === "[object Object]") {
            valueNode = this.objectToTable(value);
        }
        else if (value !== null && Array.isArray(value) && value.length > 0) {
            valueNode = this.arrayToTable(value);
        }
        else {
            valueNode = DOM_1.div("value", "" + value);
        }
        this.append(DOM_1.div("print", [
            valueNode,
            DOM_1.div("type", this.getType(value))
        ]));
    };
    DOMConsole.prototype.listToTable = function (data) {
        var head = [];
        var body = [];
        var cursor = data;
        var first = true;
        if (typeof data.value == "object") {
            var props = Object.getOwnPropertyNames(data.value);
            var cols = [];
            for (var i = 0; i < props.length; i++) {
                cols.push(DOM_1.th("listData", props[i]));
            }
            head.push(DOM_1.tr("listRow", cols));
            do {
                var cols_1 = [];
                for (var i = 0; i < props.length; i++) {
                    cols_1.push(DOM_1.td("listValue " + (this.getType(cursor.value[props[i]])), cursor.value[props[i]]));
                }
                body.push(DOM_1.tr("listRow" + (first ? " first" : ""), cols_1));
                first = false;
                cursor = list.rest(cursor);
            } while (cursor !== null);
        }
        else {
            do {
                body.push(DOM_1.tr("listRow" + (first ? " first" : ""), [
                    DOM_1.td("listValue " + (this.getType(cursor.value)), cursor.value)
                ]));
                first = false;
                cursor = list.rest(cursor);
            } while (cursor !== null);
        }
        body.push(DOM_1.tr("listRow", [
            DOM_1.td("listValue null", "null")
        ]));
        return DOM_1.table("listTable", [
            DOM_1.thead("listHead", head),
            DOM_1.tbody("listBody", body)
        ]);
    };
    DOMConsole.prototype.arrayToTable = function (data) {
        var head = [];
        var body = [];
        if (typeof data[0] == "object") {
            var props = Object.getOwnPropertyNames(data[0]);
            var cols = [];
            cols.push(DOM_1.th("listData arrayIndex", "index"));
            for (var i = 0; i < props.length; i++) {
                cols.push(DOM_1.th("listData", props[i]));
            }
            head.push(DOM_1.tr("listRow", cols));
            for (var i = 0; i < data.length; i++) {
                var cols_2 = [];
                cols_2.push(DOM_1.td("listValue number arrayIndex", "" + i));
                for (var p = 0; p < props.length; p++) {
                    cols_2.push(DOM_1.td("listValue " + (this.getType(data[0][props[p]])), data[i][props[p]]));
                }
                body.push(DOM_1.tr("listRow", cols_2));
            }
        }
        else {
            var cols = [];
            cols.push(DOM_1.th("listData arrayIndex", "index"));
            cols.push(DOM_1.th("listData", "element"));
            head.push(DOM_1.tr("listRow", cols));
            for (var i = 0; i < data.length; i++) {
                var cols_3 = [];
                cols_3.push(DOM_1.td("listValue number arrayIndex", "" + i));
                cols_3.push(DOM_1.td("listValue " + (this.getType(data[i])), data[i]));
                body.push(DOM_1.tr("listRow", cols_3));
            }
        }
        return DOM_1.table("listTable", [
            DOM_1.thead("listHead", head),
            DOM_1.tbody("listBody", body)
        ]);
    };
    DOMConsole.prototype.objectToTable = function (data) {
        var props = Object.getOwnPropertyNames(data);
        var rows = [];
        for (var i = 0; i < props.length; i++) {
            rows.push(DOM_1.tr("objectRow", [
                DOM_1.td("objectProperty", props[i]),
                DOM_1.td("objectValue", data[props[i]])
            ]));
        }
        return DOM_1.table("objectTable", rows);
    };
    DOMConsole.prototype.image = function (url) {
        var imgElement = DOM_1.img(url);
        this.append(DOM_1.div("image", [
            imgElement
        ]));
    };
    DOMConsole.prototype.promptNumber = function (prompt) {
        var _this = this;
        var parser = function (value) { return parseFloat(value); };
        var validate = function (value) { return !isNaN(parseFloat(value)); };
        var promise = new Promise(function (resolve, reject) {
            _this.ask(prompt, "number", validate, parser, function (value) {
                resolve(value);
            });
        });
        promise = promise.catch(function (err) {
            _this.error(err);
        });
        return promise;
    };
    DOMConsole.prototype.promptString = function (prompt) {
        var _this = this;
        var parser = function (value) { return value; };
        var validator = function (value) {
            return value !== "";
        };
        var promise = new Promise(function (resolve, reject) {
            _this.ask(prompt, "string", validator, parser, function (value) {
                resolve(value);
            });
        });
        promise.catch(function (err) {
            _this.error(err);
        });
        return promise;
    };
    DOMConsole.prototype.promptBoolean = function (prompt) {
        var _this = this;
        var regex = /^true|false$/i;
        var parser = function (value) {
            if (value.toLowerCase() === "true") {
                return true;
            }
            else {
                return false;
            }
        };
        var validator = function (value) { return regex.test(value); };
        return new Promise(function (resolve, reject) {
            _this.ask(prompt, "boolean", validator, parser, function (value) {
                resolve(value);
            });
        });
    };
    DOMConsole.prototype.csvToArray = function (prompt, classname) {
        var _this = this;
        return new Promise(function (resolve, reject) {
            var control = new CSVInput_1.default(prompt, classname, function (value) {
                resolve(value);
            });
            _this.append(control.dom);
        });
    };
    DOMConsole.prototype.csvToList = function (prompt, classname) {
        return __awaiter(this, void 0, void 0, function () {
            var _a, _b, _c;
            return __generator(this, function (_d) {
                switch (_d.label) {
                    case 0:
                        _b = (_a = list.listify).apply;
                        _c = [null];
                        return [4, this.csvToArray(prompt, classname)];
                    case 1: return [2, _b.apply(_a, _c.concat([_d.sent()]))];
                }
            });
        });
    };
    DOMConsole.prototype.ask = function (prompt, type, validator, parser, cb) {
        var control = new TextInput_1.default(prompt, type, validator, parser, cb);
        this.append(control.dom);
        control.focus();
    };
    DOMConsole.prototype.clear = function () {
        while (this._el.firstChild) {
            this._el.removeChild(this._el.firstChild);
        }
    };
    DOMConsole.prototype.random = function (floor, ceiling) {
        var delta = Math.random() * (ceiling - floor + 1);
        return Math.floor(floor + delta);
    };
    DOMConsole.prototype.setInterval = function (cb, duration) {
        return window.setInterval(cb, duration);
    };
    DOMConsole.prototype.getType = function (value) {
        var type = "";
        if (typeof value === "string") {
            type = "string";
        }
        else if (typeof value === "number") {
            type = "number";
        }
        else if (typeof value === "boolean") {
            type = "boolean";
        }
        else if (value === null) {
            type = "null";
        }
        else if (value === undefined) {
            type = "undefined";
        }
        else if (Array.isArray(value)) {
            if (value.length > 0) {
                type = this.getType(value[0]) + "[]";
            }
            else {
                type = "[]";
            }
        }
        else if (value instanceof list.Node) {
            return "List<" + this.getType(value.value) + ">";
        }
        else if (typeof value == "object") {
            type = "object";
            if (value.constructor.name) {
                if (value.constructor.name !== "Object") {
                    type = value.constructor.name;
                }
            }
        }
        return type;
    };
    DOMConsole.prototype.append = function (el) {
        this._el.appendChild(el);
    };
    return DOMConsole;
}());
exports.default = DOMConsole;
//# sourceMappingURL=DOMConsole.js.map