"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
var Shape_1 = require("./Shape");
var Rectangle_1 = require("./Rectangle");
var Circle_1 = require("./Circle");
var Group_1 = require("./Group");
var Text_1 = require("./Text");
var Line_1 = require("./Line");
var Ellipse_1 = require("./Ellipse");
var Path_1 = require("./Path");
var SVG = (function () {
    function SVG(id) {
        var _this = this;
        this.autoScale = true;
        this._postDebounce = false;
        this.domElement = document.getElementById(id);
        window.onresize = function () { return _this.queuePostProcess(); };
    }
    SVG.prototype.render = function (element) {
        this.clearChildren(this.domElement);
        this.paint(this.domElement, element);
        this.postProcess();
    };
    SVG.prototype.clearChildren = function (parent) {
        while (parent.firstChild) {
            parent.removeChild(parent.firstChild);
        }
    };
    SVG.prototype.paint = function (element, shape) {
        var shapeElement = this.createElement(shape);
        this.update(shapeElement, shape);
        element.appendChild(shapeElement);
    };
    SVG.prototype.update = function (shapeElement, shape) {
        var _this = this;
        this.assignSVGAttributes(shape, shapeElement);
        if (shape instanceof Shape_1.default) {
            this.assignShapeAttributes(shape, shapeElement);
        }
        if (shape instanceof Group_1.default) {
            this.paintGroup(shape, shapeElement);
        }
        if (shape instanceof Rectangle_1.default) {
            this.assignRectangleAttributes(shape, shapeElement);
        }
        else if (shape instanceof Circle_1.default) {
            this.assignCircleAttributes(shape, shapeElement);
        }
        else if (shape instanceof Text_1.default) {
            this.assignTextAttributes(shape, shapeElement);
        }
        else if (shape instanceof Line_1.default) {
            this.assignLineAttributes(shape, shapeElement);
        }
        else if (shape instanceof Ellipse_1.default) {
            this.assignEllipseAttributes(shape, shapeElement);
        }
        else if (shape instanceof Path_1.default) {
            this.assignPathAttributes(shape, shapeElement);
        }
        shape.clearObservers();
        shape.addObserver(function (shape) {
            _this.update(shapeElement, shape);
            _this.queuePostProcess();
        });
    };
    SVG.prototype.createElement = function (shape) {
        var tag = "";
        if (shape instanceof Group_1.default) {
            tag = "g";
        }
        else if (shape instanceof Rectangle_1.default) {
            tag = "rect";
        }
        else if (shape instanceof Circle_1.default) {
            tag = "circle";
        }
        else if (shape instanceof Text_1.default) {
            tag = "text";
        }
        else if (shape instanceof Line_1.default) {
            tag = "line";
        }
        else if (shape instanceof Ellipse_1.default) {
            tag = "ellipse";
        }
        else if (shape instanceof Path_1.default) {
            tag = "path";
        }
        else {
            throw new Error("Unsupported SVGElement type.");
        }
        return document.createElementNS("http://www.w3.org/2000/svg", tag);
    };
    SVG.prototype.assignSVGAttributes = function (shape, e) {
        var mouseable = e;
        mouseable.onclick = shape.onclick.bind(shape);
        mouseable.ondblclick = shape.ondblclick.bind(shape);
        mouseable.onmousemove = shape.onmousemove.bind(shape);
        mouseable.onmouseup = shape.onmouseup.bind(shape);
        mouseable.onmousedown = shape.onmousedown.bind(shape);
        mouseable.onmouseover = shape.onmouseover.bind(shape);
        mouseable.onmouseout = shape.onmouseout.bind(shape);
        e.setAttribute("transform", shape.transform.toMatrix());
    };
    SVG.prototype.paintGroup = function (shape, g) {
        var _this = this;
        this.clearChildren(g);
        shape.children.forEach(function (child) {
            _this.paint(g, child);
        });
    };
    SVG.prototype.assignShapeAttributes = function (shape, e) {
        if (shape.opacity !== 1) {
            e.setAttribute("opacity", String(shape.opacity));
        }
        if (shape.fillOpacity > 0) {
            e.setAttribute("fill", shape.fill.toRGB());
        }
        if (shape.fillOpacity !== 1) {
            e.setAttribute("fill-opacity", String(shape.fillOpacity));
        }
        if (shape.strokeOpacity > 0) {
            e.setAttribute("stroke", shape.stroke.color.toRGB());
            e.setAttribute("stroke-width", String(shape.stroke.width));
            e.setAttribute("stroke-linecap", shape.stroke.linecap);
            e.setAttribute("stroke-linejoin", shape.stroke.linejoin);
        }
        if (shape.strokeOpacity !== 1) {
            e.setAttribute("stroke-opacity", String(shape.strokeOpacity));
        }
    };
    SVG.prototype.assignRectangleAttributes = function (shape, r) {
        r.setAttribute("width", shape.width + "px");
        r.setAttribute("height", shape.height + "px");
        r.setAttribute("x", String(shape.x));
        r.setAttribute("y", String(shape.y));
    };
    SVG.prototype.assignCircleAttributes = function (shape, c) {
        c.setAttribute("r", shape.r + "px");
        c.setAttribute("cx", String(shape.cx));
        c.setAttribute("cy", String(shape.cy));
    };
    SVG.prototype.assignLineAttributes = function (shape, l) {
        l.setAttribute("x1", String(shape.x1));
        l.setAttribute("y1", String(shape.y1));
        l.setAttribute("x2", String(shape.x2));
        l.setAttribute("y2", String(shape.y2));
    };
    SVG.prototype.assignTextAttributes = function (shape, text) {
        text.innerHTML = shape.text;
        text.setAttribute("x", String(shape.x));
        text.setAttribute("y", String(shape.y));
        text.setAttribute("font-family", shape.font.family);
        text.setAttribute("font-size", shape.font.size + "px");
        text.setAttribute("text-anchor", shape.textAnchor);
        if (shape.textLength !== undefined) {
            text.setAttribute("textLength", String(shape.textLength));
            text.setAttribute("lengthAdjust", shape.lengthAdjust);
        }
    };
    SVG.prototype.assignEllipseAttributes = function (shape, ellipse) {
        ellipse.setAttribute("cx", String(shape.cx));
        ellipse.setAttribute("cy", String(shape.cy));
        ellipse.setAttribute("rx", String(shape.rx));
        ellipse.setAttribute("ry", String(shape.ry));
    };
    SVG.prototype.assignPathAttributes = function (shape, path) {
        path.setAttribute("d", shape.toString());
    };
    SVG.prototype.queuePostProcess = function () {
        var _this = this;
        if (this._postDebounce === false) {
            this._postDebounce = true;
            setTimeout(function () {
                _this.postProcess();
            }, 0);
        }
    };
    SVG.prototype.postProcess = function () {
        if (!this.autoScale) {
            return;
        }
        this._postDebounce = false;
        var board = this.domElement;
        if (board.firstChild === null) {
            return;
        }
        var clientRect = board.getBoundingClientRect();
        var width = clientRect.width * 0.9;
        var height = clientRect.height * 0.9;
        var scaleBox = board.firstChild.getBBox();
        var widthRatio = scaleBox.width / width;
        var heightRatio = scaleBox.height / height;
        var scale;
        if (widthRatio > heightRatio) {
            scale = 1 / widthRatio;
        }
        else {
            scale = 1 / heightRatio;
        }
        if (scale === Infinity) {
            return;
        }
        var transG = document.createElementNS("http://www.w3.org/2000/svg", "g");
        board.appendChild(transG);
        var scaleG = document.createElementNS("http://www.w3.org/2000/svg", "g");
        transG.appendChild(scaleG);
        for (var i = 0; i < board.children.length; i++) {
            var child = board.children.item(i);
            if (child !== transG) {
                board.removeChild(child);
                scaleG.appendChild(child);
            }
        }
        scaleG.setAttribute("transform", "scale(" + scale + ")");
        var transBox = transG.getBBox();
        var centerX = (clientRect.right - clientRect.left) / 2.0;
        var centerBoardX = transBox.x + (transBox.width / 2.0);
        var deltaX = centerX - centerBoardX;
        var centerY = (clientRect.bottom - clientRect.top) / 2.0;
        var centerBoardY = transBox.y + (transBox.height / 2.0);
        var deltaY = centerY - centerBoardY;
        transG.setAttribute("transform", "translate(" + deltaX + "," + deltaY + ")");
    };
    return SVG;
}());
exports.default = SVG;
//# sourceMappingURL=SVG.js.map